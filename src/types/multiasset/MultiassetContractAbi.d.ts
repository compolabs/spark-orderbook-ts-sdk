/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.93.0
  Forc version: 0.62.0
  Fuel-Core version: 0.31.0
*/

import type {
  BigNumberish,
  BN,
  Bytes,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
  StdString,
} from 'fuels';

import type { Option, Enum } from "./common";

export enum AccessErrorInput { NotOwner = 'NotOwner' };
export enum AccessErrorOutput { NotOwner = 'NotOwner' };
export type AssetErrorInput = Enum<{ AssetNotFound: AssetIdInput, AssetAlreadyExists: AssetIdInput }>;
export type AssetErrorOutput = Enum<{ AssetNotFound: AssetIdOutput, AssetAlreadyExists: AssetIdOutput }>;
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InitializationErrorInput { CannotReinitialized = 'CannotReinitialized' };
export enum InitializationErrorOutput { CannotReinitialized = 'CannotReinitialized' };
export type StateInput = Enum<{ Uninitialized: [], Initialized: IdentityInput, Revoked: [] }>;
export type StateOutput = Enum<{ Uninitialized: [], Initialized: IdentityOutput, Revoked: [] }>;
export type ValueErrorInput = Enum<{ ZeroStringLength: [], ZeroValue: [], BadIntValue: BigNumberish }>;
export type ValueErrorOutput = Enum<{ ZeroStringLength: [], ZeroValue: [], BadIntValue: number }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type AssetMintedInput = { recipient: IdentityInput, asset: AssetIdInput, amount: BigNumberish, minter: IdentityInput };
export type AssetMintedOutput = { recipient: IdentityOutput, asset: AssetIdOutput, amount: BN, minter: IdentityOutput };
export type AssetNewInput = { asset: AssetIdInput, name: StdString, symbol: StdString, decimals: BigNumberish, creator: IdentityInput };
export type AssetNewOutput = { asset: AssetIdOutput, name: StdString, symbol: StdString, decimals: number, creator: IdentityOutput };
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type OwnershipSetInput = { new_owner: IdentityInput };
export type OwnershipSetOutput = { new_owner: IdentityOutput };
export type OwnershipTransferredInput = { new_owner: IdentityInput, previous_owner: IdentityInput };
export type OwnershipTransferredOutput = { new_owner: IdentityOutput, previous_owner: IdentityOutput };

export interface MultiassetContractAbiInterface extends Interface {
  functions: {
    decimals: FunctionFragment;
    name: FunctionFragment;
    symbol: FunctionFragment;
    total_assets: FunctionFragment;
    total_supply: FunctionFragment;
    owner: FunctionFragment;
    asset_get: FunctionFragment;
    asset_new: FunctionFragment;
    initialize_ownership: FunctionFragment;
    mint: FunctionFragment;
    transfer_ownership: FunctionFragment;
  };
}

export class MultiassetContractAbi extends Contract {
  interface: MultiassetContractAbiInterface;
  functions: {
    decimals: InvokeFunction<[asset: AssetIdInput], Option<number>>;
    name: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    symbol: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    total_assets: InvokeFunction<[], BN>;
    total_supply: InvokeFunction<[asset: AssetIdInput], Option<BN>>;
    owner: InvokeFunction<[], StateOutput>;
    asset_get: InvokeFunction<[symbol: StdString], Option<AssetIdOutput>>;
    asset_new: InvokeFunction<[name: StdString, symbol: StdString, decimals: BigNumberish], AssetIdOutput>;
    initialize_ownership: InvokeFunction<[new_owner: IdentityInput], void>;
    mint: InvokeFunction<[recipient: IdentityInput, asset: AssetIdInput, amount: BigNumberish], void>;
    transfer_ownership: InvokeFunction<[new_owner: IdentityInput], void>;
  };
}
